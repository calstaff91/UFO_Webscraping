{
    "collab_server" : "",
    "contents" : "# TWAU Hack Day - UFO Sightings Choropleth Map\n# Isi Avbulimen\n# October 2017\n\n# install.packages(\"readr\")\n# install.packages(\"dplyr\")\n# install.packages(\"maptools\")\n# install.packages(\"rgdal\")\n# install.packages(\"rgeos\")\n# install.packages(\"classInt\")\n# install.packages(\"RColorBrewer\")\n\n# Load libraries\nlibrary(readr) # for reading and writing CSV files\nlibrary(dplyr) # for working with data\n\n# Spatial libraries\nlibrary(maptools) # allows R to handle geographic data\nlibrary(rgdal) # Reprojects data between co-ordinate systems (e.g. lat/long to BNG)\nlibrary(rgeos) # allows spatial overlay\n\n# Other libraries you will need\nlibrary(classInt) # defines intervals for data sets\nlibrary(RColorBrewer) # defines colour palettes\n\n# you may have to install some of these packages if they're not already installed\n\n\n# SHAPE FILES ---------------------------------------------------------\n# These give the shape of the map \n\n# Load in the shapefiles from the directory where they are saved\nStates <- rgdal::readOGR(\"Shapefiles\",\"states\")\n\n# Use plot to see blank shape file i.e. the outlines of the map\nplot(States)\n\n# DRAW A SIMPLE CHLOROPLETH MAP -----------------------------------------------------------------\n\n\n# Read in your data for the map e.g. my_data\nUS_data <- read.csv(\"Data/US_random_data.csv\")\n\n# N.B. your variable needs to be numeric\nUS_data$Percentage <- as.numeric(US_data$Percentage)\n\n\n##### 1st you need to Join the data you would like to the shape file \n# This is done using the data slot\n# slots are used to store information - data, polygons, plotOrder, bbox, proj4string\n# To access a slot you use the @ sign after the object name\n\n# The data slot acts like a data frame and stores all the data connected with the shape file\n# Use head() to look at the top six lines of the shapefile\nhead(States@data)\n\n# We join the data by State Abbreviation \nStates@data <- left_join(States@data, US_data, by = c(\"STATE_ABBR\" = \"Official_USPS_Code\"))\n\n\n#use head() to check the top lines of the data again\nhead(States@data)\n\n\n#### 2nd create the intervals you would like to map the data over\n\n# Extract variable you are mapping call it 'var'\nvar <- States@data[,\"Percentage\"]\n\n# Find intervals\n# set your desired number of breaks e.g. n=5\n# use your preferred method to create the intervals i.e.\n# \"fixed\", \"sd\", \"equal\", \"pretty\", \"quantile\", \"kmeans\", \"hclust\", \"bclust\", \"fisher\", or \"jenks\"\nmy_breaks <- classIntervals(var, n=5, style = \"fisher\")\n\n# check out the breaks which your choosen interval method has created\nmy_breaks$brks\n\n# if you want you can compare your interval method to another method or create your own breaks\n# equal breaks\nmy_breaks_equal <- classIntervals(var, n=5, style = \"equal\")\n# tip: look at the range of your variable to decide where your fixed breaks could be\n\n#check out the breaks which you have created\nmy_breaks_equal$brks\n\n# Have a closer look distribution of the variable and the breaks you have defined using abline\n# this way you can see how much data is falling into each interval for each method\nhist(var)\nabline(v=my_breaks$brks, col=\"blue\")\nabline(v=my_breaks_equal$brks, col=\"red\")\n\n##### 3rd Select the correct number of colours from the palette\n\n#view the different palettes available\nbrewer.pal.info\n\n#select your palette with the number colours equal to number of breaks\nmy_colours <- brewer.pal(5, \"Blues\")\n\n#### 4th - Now you can plot your map\n\n# Here, I'm plotting using the 'fisher' breaks \nplot(States, col=my_colours[findInterval(var, my_breaks$brks, all.inside = TRUE)], axes=FALSE, border=\"black\")\n\n#### 5th - Add a legend\nlegend(x=-75,y=70, legend=leglabs(my_breaks$brks, under=\"Under\", over=\"Over\"), \n       fill=my_colours, border=\"black\", \n       bty=\"n\", cex=0.8, title=\"legend_title\")\n\n# Add a \"tidier\" legend\n# This one rounds your values up\n# If you add this it will appear on top of any legend which has already been drawn so\n# you will need to re-draw the map\nplot(States, col=my_colours[findInterval(var, my_breaks$brks, all.inside = TRUE)], axes=FALSE, border=\"black\")\n\nlegend(x=-75,y=70, legend=leglabs(round(my_breaks$brks,0), under=\"Under\", over=\"Over\"), \n       fill=my_colours, border=\"black\", \n       bty=\"n\", cex=0.8, title=\"legend_title\")\n\n#### 6th Add title\ntitle(\"Plot title\")\n# using '\\n' will put text after it on the line below \n\n\n###############################\n\n#Alternative legend \n\n\n#Create legend content\nlegend_labels <- c(\"5 - 27\", \n                   \"27 - 45\",\n                   \"45 - 67\",\n                   \"67 - 83\",\n                   \"83 - 99\")\nlegend_colours <- c('#EFF3FF', \n                    '#BDD7E7',\n                    '#6BAED6',\n                    '#3182BD',\n                    '#08519C') \n#white - #FFFFFF\n\n#Plot legend\nlegend(x=-75, y=70, legend=legend_labels, fill=legend_colours, \n       bty=\"n\", #type of box drawn around legend\n       x.intersp = 0.3, #horizontal spacing of legend\n       y.intersp = 0.6, #vertical spacing\n       cex = 0.8, #size of text\n       title=\"Legend title\")\n\n#to play around with the position of the legend, in the plot set axes=TRUE in order to see the axes\n\n#############################################\n#Labels\n\n#### Add all labels ####\n\n# Find the centroid for each LA \ncentroids <- gCentroid(States, byid=TRUE)\n\n# Add all labels using text which takes the centroid coordinates and state names as inputs\ntext(centroids@coords, labels= States@data$STATE_ABBR)\n\n\n\n##### Add a subset of labels ###\n\n# This chooses the rows in the coordinate dataframe where the variable in the data slot is over 50\nfiltered_centroid <- centroids@coords[which(States@data$Percentage>50),]\n\n# This chooses the equivalent names and makes them characters\nfiltered_data <- States@data$STATE_ABBR[which(States@data$Percentage>50)]\nfiltered_data <- as.character(filtered_data)\n\n# Plot map as usual\nplot(States, col=my_colours[findInterval(var, my_breaks$brks, all.inside = TRUE)], axes=FALSE, border=\"black\")\n\n# Add the resulting labels\ntext(filtered_centroid, filtered_data)\n\n\n\n#### Add your own chosen labels ####\n\n# Create vector with labels you want\nchosen_states <- c(\"AK\", \"HI\", \"CA\")\n\n# chooses relevant rows in the coordinate dataframe where states are within those chosen\nchosen_centroid <- centroids@coords[which(States@data$STATE_ABBR %in% chosen_states),]\n\n# This chooses the equivalent names and makes them characters\nchosen_data <- States@data$STATE_ABBR[which(States@data$STATE_ABBR %in% chosen_states)]\nchosen_data <- as.character(chosen_data)\n\n# Plot map as usual\nplot(States, col=my_colours[findInterval(var, my_breaks$brks, all.inside = TRUE)], axes=FALSE, border=\"black\")\n\n# Add the resulting labels\ntext(chosen_centroid, chosen_data)\n",
    "created" : 1507192542966.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "260549757",
    "id" : "AE07E4A1",
    "lastKnownWriteTime" : 1507624776,
    "last_content_update" : 1507624776115,
    "path" : "C:/Users/iavbulimen/OneDrive - Department for Education/Desktop/TWAU Hack Day/R/Choropleth map code.R",
    "project_path" : "R/Choropleth map code.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}